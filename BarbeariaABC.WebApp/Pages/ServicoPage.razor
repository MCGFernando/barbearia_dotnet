@page "/servicos"

<div class="d-flex justify-content-between align-content-center">
    <h3>Listagem de Serviços</h3>
    <Button Color="ButtonColor.Primary" @onclick="OnShowModalClick">Novo</Button>
</div>
<hr />

<!--Toast-->
<Toasts class="p-3" Messages="messages" AutoHide="true" Delay="6000" Placement="ToastsPlacement.TopRight" />
<!--End Toast-->

<!--Grid-->
@if (Servicos is not null)
{
    <Grid TItem="Models.Servico"
          Class="table table-hover table-bordered table-striped"
          DataProvider="ServicosDataProvider"
          AllowFiltering="true"
          AllowPaging="true"
          PageSize="5"
          AllowSorting="true"
          AllowSelection="true"
          EmptyText="Sem registos para mostrar"
          SelectionMode="GridSelectionMode.Multiple"
          SelectedItemsChanged="OnSelectedItemsChanged"
          Responsive="true">
        <GridColumns>
            <GridColumn TItem="Models.Servico" HeaderText="#" PropertyName="Id" SortKeySelector="item => item.Id">
                @context.Id
            </GridColumn>
            <GridColumn TItem="Models.Servico" HeaderText="Serviço" PropertyName="Descricao" SortKeySelector="item => item.Descricao">
                @context.Descricao
            </GridColumn>
            <GridColumn TItem="Models.Servico" HeaderText="Duração" PropertyName="Duracao" SortKeySelector="item => item.Duracao">
                @context.Duracao
            </GridColumn>
            <GridColumn TItem="Models.Servico" HeaderText="Preço" PropertyName="Preco" SortKeySelector="item => item.Preco">
                @context.Preco
            </GridColumn>
            <GridColumn TItem="Models.Servico" HeaderText="Acção" Filterable="false">

                <Dropdown Color="DropdownColor.Secondary">
                    <DropdownToggleButton>Dropdown button</DropdownToggleButton>
                    <DropdownMenu>
                        <DropdownItem To="#" Type="DropdownItemType.Link">Ver</DropdownItem>
                        <DropdownItem @onclick="(()=> HandleEditarButtonClicked(context.Id))">Editar</DropdownItem>
                        <DropdownItem @onclick="(()=> HandleDesativarButtonClicked(context.Id))">Desativar</DropdownItem>
                    </DropdownMenu>
                </Dropdown>

            </GridColumn>
        </GridColumns>
    </Grid>
}
<!--End Grid-->
<!--Modal-->

<Modal @ref="modal" Title="Cadastro de Serviço">
    <BodyTemplate>

        <EditForm Model="@ServicoCreateDTO" OnValidSubmit="HandleOnSubmitEvent">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group mb-3">
                <label for="servico" class="control-label text-secondary">Serviço</label>
                <InputText type="text" id="servico" class="form-control" @bind-Value="ServicoCreateDTO.Descricao" />
                <ValidationMessage For="@(()=> ServicoCreateDTO.Descricao)" />
            </div>
            <div class="form-group mb-3">
                <label for="duracao" class="control-label text-secondary">Duração</label>
                <InputText type="text" id="duracao" class="form-control" @bind-Value="ServicoCreateDTO.Duracao" placeholder="HH:MM:SS" />
                <ValidationMessage For="@(()=> ServicoCreateDTO.Duracao)" />
            </div>
            <div class="form-group mb-3">
                <label for="preco" class="control-label text-secondary">Preço</label>
                <InputNumber type="text" id="preco" class="form-control" @bind-Value="ServicoCreateDTO.Preco" />
                <ValidationMessage For="@(()=> ServicoCreateDTO.Preco)" />
            </div>
            <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Fechar</Button>
            <button type="submit" class="btn btn-primary">Salvar</button>
        </EditForm>

    </BodyTemplate>
</Modal>
<!--End Modal-->


@code {
    [Inject]
    protected Services.IServicoService ServicoService { get; set; }
    [Inject]
    public IJSRuntime JSRuntime { get; set; }
    protected IEnumerable<Models.Servico> Servicos { get; set; }
    public Models.Servico Servico { get; set; } = new();
    public Models.DTO.ServicoCreateDTO ServicoCreateDTO { get; set; } = new();

    /*Blazor.Bootstrap props*/
    private HashSet<Models.Servico> selectedServicos = new();
    private Modal modal = default!;
    List<ToastMessage> messages = new List<ToastMessage>();
    /*Fim Blazor.Bootstrap props*/

    protected override async Task OnInitializedAsync()
    {
        Servicos = await ServicoService.GetAllAsync();
    }

    /*Blazor.Bootstrap Methods*/
    private async Task<GridDataProviderResult<Models.Servico>> ServicosDataProvider(GridDataProviderRequest<Models.Servico> request)
    {
        if (Servicos == null)
        {
            (await ServicoService.GetAllAsync()).ToList();
        }

        return await Task.FromResult(request.ApplyTo(Servicos));
    }

    private Task OnSelectedItemsChanged(HashSet<Models.Servico> obj)
    {
        selectedServicos = obj is not null && obj.Any() ? obj : new();
        return Task.CompletedTask;
    }

    private async Task OnShowModalClick()
    {
        await modal.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await modal.HideAsync();
    }
    private void ShowMessage(ToastType toastType)
    {
        messages.Add(CreateToastMessage(toastType));
        StateHasChanged();
    }

    private ToastMessage CreateToastMessage(ToastType toastType)
    => new ToastMessage
        {
            Type = toastType,
            Message = "Serviço salvo com sucesso",
        };

    /*Fim Blazor.Bootstrap Methods*/


    protected async void HandleOnSubmitEvent()
    {
        if (ServicoCreateDTO == null)
        {
            //message = "Não foram fornecidos dados para serem cadastrados";
            ServicoCreateDTO = new();
            return;
        }

        Servico = new()
            {
                Id = ServicoCreateDTO.Id,
                Descricao = ServicoCreateDTO.Descricao,
                Duracao = TimeSpan.Parse(ServicoCreateDTO.Duracao),
                Preco = ServicoCreateDTO.Preco
            };


        if (Servico.Id == 0)
        {
            await ServicoService.AddAsync(Servico);
        }
        else
        {
            await ServicoService.UpdateAsync(Servico);
        }
        Servico = new();
        ServicoCreateDTO = new();
        await OnHideModalClick();
        Servicos = null;
        StateHasChanged();
        Servicos = await ServicoService.GetAllAsync();
        StateHasChanged();
        ShowMessage(ToastType.Success);
    }

    protected async void HandleEditarButtonClicked(int id)
    {

        Servico = await ServicoService.GetByIdAsync(id);
        ServicoCreateDTO = new()
            {
                Id = Servico.Id,
                Descricao = Servico.Descricao,
                Duracao = Servico.Duracao.ToString(),
                Preco = Servico.Preco
        };
        StateHasChanged();

        await OnShowModalClick();
    }
    protected void HandleDesativarButtonClicked(int id)
    {

    }
}
