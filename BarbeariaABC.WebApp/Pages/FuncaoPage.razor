@page "/funcoes"

<div class="d-flex justify-content-between align-content-center">
    <h3>Listagem de Funções</h3>
    <Button Color="ButtonColor.Primary" @onclick="OnShowModalClick">Novo</Button>
</div>

<hr />

<!--Toast-->
<Toasts class="p-3" Messages="messages" AutoHide="true" Delay="6000" Placement="ToastsPlacement.TopRight" />
<!--End Toast-->

<!--Grid-->
@if (Funcoes is not null)
{
    <Grid TItem="Models.Funcao"
    Class="table table-hover table-bordered table-striped"
    DataProvider="FuncoesDataProvider"
    AllowFiltering="true"
    AllowPaging="true"
    PageSize="5"
    AllowSorting="true"
    AllowSelection="true"
    EmptyText="Sem registos para mostrar"
    SelectionMode="GridSelectionMode.Multiple"
    SelectedItemsChanged="OnSelectedItemsChanged"
    Responsive="true">
        <GridColumns>
            <GridColumn TItem="Models.Funcao" HeaderText="#" PropertyName="Id" SortKeySelector="item => item.Id">
                @context.Id
            </GridColumn>
            <GridColumn TItem="Models.Funcao" HeaderText="Função" PropertyName="Descricao" SortKeySelector="item => item.Descricao">
                @context.Descricao
            </GridColumn>
            <GridColumn TItem="Models.Funcao" HeaderText="Acção" Filterable="false">

                <Dropdown Color="DropdownColor.Secondary">
                    <DropdownToggleButton>Dropdown button</DropdownToggleButton>
                    <DropdownMenu>
                        <DropdownItem To="#" Type="DropdownItemType.Link">Ver</DropdownItem>
                        <DropdownItem @onclick="(()=> HandleEditarButtonClicked(context.Id))">Editar</DropdownItem>
                        <DropdownItem @onclick="(()=> HandleDesativarButtonClicked(context.Id))">Desativar</DropdownItem>
                    </DropdownMenu>
                </Dropdown>

            </GridColumn>
        </GridColumns>
    </Grid>
}
<!--End Grid-->


<!--Modal-->

<Modal @ref="modal" Title="Cadastro de Função">
    <BodyTemplate>

        <EditForm Model="@Funcao" OnValidSubmit="HandleOnSubmitEvent">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group mb-3">
                <label for="descricao" class="control-label text-secondary">Função</label>
                <InputText type="text" id="descricao" class="form-control" @bind-Value="Funcao.Descricao" />
                <ValidationMessage For="@(()=> Funcao.Descricao)" />
            </div>
            <Button Color="ButtonColor.Secondary" @onclick="OnHideModalClick">Fechar</Button>
            <button type="submit" class="btn btn-primary">Salvar</button>
        </EditForm>

    </BodyTemplate>
</Modal>
<!--End Modal-->

@code {
    [Inject]
    public Services.IFuncaoService FuncaoService { get; set; } = default!;
    public List<Models.Funcao>? Funcoes { get; set; } = default!;
    public Models.Funcao Funcao { get; set; } = new();

    /*Blazor.Bootstrap props*/
    private HashSet<Models.Funcao> selectedFuncoes = new();
    private Modal modal = default!;
    List<ToastMessage> messages = new List<ToastMessage>();
    /*Fim Blazor.Bootstrap props*/

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Funcoes = (await FuncaoService.GetAllAsync()).ToList();
        }catch(Exception ex)
        {
            
        }
    }
    /*Blazor.Bootstrap Methods*/
    private async Task<GridDataProviderResult<Models.Funcao>> FuncoesDataProvider(GridDataProviderRequest<Models.Funcao> request)
    {
        if (Funcoes == null)
        {
            (await FuncaoService.GetAllAsync()).ToList();
        }

        return await Task.FromResult(request.ApplyTo(Funcoes));
    }

    private Task OnSelectedItemsChanged(HashSet<Models.Funcao> obj)
    {
        selectedFuncoes = obj is not null && obj.Any() ? obj : new();
        return Task.CompletedTask;
    }

    private async Task OnShowModalClick()
    {
        await modal.ShowAsync();
    }

    private async Task OnHideModalClick()
    {
        await modal.HideAsync();
    }
    private void ShowMessage(ToastType toastType) 
    {
        messages.Add(CreateToastMessage(toastType));
        StateHasChanged();
    }

    private ToastMessage CreateToastMessage(ToastType toastType)
    => new ToastMessage
        {
            Type = toastType,
            Message = "Função salva com sucesso",
        };

    /*Fim Blazor.Bootstrap Methods*/


    protected async void HandleOnSubmitEvent()
    {
        if (Funcao == null)
        {
            Funcao = new();
            return;
        }


        if (Funcao.Id == 0)
        {
            await FuncaoService.AddAsync(Funcao);
        }
        else
        {
            await FuncaoService.UpdateAsync(Funcao);
        }
        

        Funcao = new();
        await OnHideModalClick();
        
        Funcoes = null;
        StateHasChanged();
        Funcoes = (await FuncaoService.GetAllAsync()).ToList();
        StateHasChanged();

        ShowMessage(ToastType.Success);
    }

    protected async void HandleEditarButtonClicked(int id)
    {
        Console.WriteLine($"Editar clicado para o ID: {id}");
        Funcao = new();
        Funcao = await FuncaoService.GetByIdAsync(id);
        StateHasChanged();
        
        await OnShowModalClick();
    }
    protected void HandleDesativarButtonClicked(int id)
    {

    }
}


